package com.bianl.readingwhat.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bianl.readingwhat.bean.movie.MovieSubject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOVIE_SUBJECT".
*/
public class MovieSubjectDao extends AbstractDao<MovieSubject, Long> {

    public static final String TABLENAME = "MOVIE_SUBJECT";

    /**
     * Properties of entity MovieSubject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _Id = new Property(0, long.class, "_Id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Id = new Property(2, String.class, "id", false, "MovieId");
        public final static Property Mobile_url = new Property(3, String.class, "mobile_url", false, "MOBILE_URL");
    }


    public MovieSubjectDao(DaoConfig config) {
        super(config);
    }
    
    public MovieSubjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOVIE_SUBJECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: _Id
                "\"TITLE\" TEXT," + // 1: title
                "\"MovieId\" TEXT," + // 2: id
                "\"MOBILE_URL\" TEXT);"); // 3: mobile_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOVIE_SUBJECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MovieSubject entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_Id());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String mobile_url = entity.getMobile_url();
        if (mobile_url != null) {
            stmt.bindString(4, mobile_url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MovieSubject entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_Id());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String mobile_url = entity.getMobile_url();
        if (mobile_url != null) {
            stmt.bindString(4, mobile_url);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MovieSubject readEntity(Cursor cursor, int offset) {
        MovieSubject entity = new MovieSubject( //
            cursor.getLong(offset + 0), // _Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // mobile_url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MovieSubject entity, int offset) {
        entity.set_Id(cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMobile_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MovieSubject entity, long rowId) {
        entity.set_Id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MovieSubject entity) {
        if(entity != null) {
            return entity.get_Id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MovieSubject entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
